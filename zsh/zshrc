autoload -Uz compinit && compinit
zstyle ':completion:*' completer _expand _complete _ignored _match _correct _approximate _prefix
zstyle ':completion:*' completions 1
zstyle ':completion:*' condition 1
zstyle ':completion:*' glob 1
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '+' '+m:{[:lower:]}={[:upper:]}' '+m:{[:lower:][:upper:]}={[:upper:][:lower:]}' '+r:|[._-]=** r:|=** l:|=*'
zstyle ':completion:*' match-original both
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':compinstall' filename "$HOME/.zshrc"
setopt appendhistory extendedglob correctall

autoload -U colors && colors
autoload -Uz vcs_info && precmd() { vcs_info }
zstyle ':vcs_info:*' enable git hg svn
zstyle ':vcs_info:git*' formats "%r:%b"
status_line() {
  local ssh=${(%):-%n@%m:%~}
  local git=" $vcs_info_msg_0_"

  local ssh_length=${#ssh}
  local git_length=${#git}

  echo "${(r.(($COLUMNS - $git_length)).)ssh}$git"
}
setopt prompt_subst
PROMPT='<< %?
%{$bg[white]%}$(status_line)%{$reset_color%}
>> '

HISTFILE="$HOME/.histfile"
HISTSIZE=10000
SAVEHIST=10000
setopt hist_expire_dups_first hist_ignore_dups share_history

bindkey -v

export EDITOR='vim'
export PAGER='less -R'
export PATH="$HOME/.gem/ruby/1.9.1/bin:$HOME/.cabal/bin:$HOME/.local/bin:$PATH"

setopt long_list_jobs

alias chgrp='chgrp --preserve-root'
alias chmod='chmod --preserve-root'
alias chown='chown --preserve-root'
alias cp='cp -i'
alias diff='colordiff -u'
alias df='df -h'
alias du='du -c -h'
alias grep='grep --color=auto'
alias ln='ln -i'
alias mkdir='mkdir -p -v'
alias mv='mv -i'
alias nano='nano -w'
alias ping='ping -c 5'
alias rm='rm -i'

alias ls='ls -hF --color=auto'
alias lsa='ls -a'
alias lsl='ls -l'
alias lsal='ls -al'
alias lsla='ls -al'

setopt auto_pushd pushd_ignore_dups

alias pacup='yaourt -Syua'
alias pacin='yaourt -Sy'
alias pacun='yaourt -Rcns'
alias pacls='yaourt -Q'
alias pacse='yaourt -Ss'

current_branch() { echo ${$(git symbolic-ref HEAD 2> /dev/null)#refs/heads/} }
alias gitst='git status -sb'
alias gitlg='git log --color --graph --abbrev-commit --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"'
alias gitdf='git diff --color=always'
alias gitpp='git up && git push'
alias gitmf='git merge --ff-only'
alias gitcm='git commit'
alias gitap='git add --patch'
alias gitrs='git reset'
alias gitbr='git branch'
alias gitco='git checkout'
gitcl() {
  git clone --recursive $@ || exit
  if [[ ${*[-1]##*.} -eq git ]]
  then
    pushd ${${*[-1]##*/}%*.git} 1>/dev/null
  else
    pushd $*[-1] 1>/dev/null
  fi
  for branch in $(git branch -r | grep -v HEAD)
  do
    git branch --track ${branch##*/} $branch 2>/dev/null
  done
  popd 1>/dev/null
}

local gpg_env_file="$HOME/.gnupg/gpg-agent.env"
if [[ ! -f $gpg_env_file ]]
then
  gpg-agent --daemon --enable-ssh-support --write-env-file $gpg_env_file > /dev/null
  chmod 600 $gpg_env_file
fi
source $gpg_env_file
export GPG_AGENT_INFO
export SSH_AUTH_SOCK
export SSH_AGENT_PID
export GPG_TTY=$(tty)
